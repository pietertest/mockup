Index: config/database.xml
===================================================================
--- config/database.xml	(revision 647)
+++ config/database.xml	(working copy)
@@ -12,7 +12,7 @@
 		<table name="userfavorite" ownerColumn="user" insertDateColumn="insertdate" />
 		<table name="log" insertDateColumn="insertdate" />
 
-		<table name="oproep" ownerColumn="user" lastupdateColumn="lastupdate" insertDateColumn="insertdate" />
+		<table name="oproep" ownerColumn="user" xlastupdateColumn="lastupdate" xinsertDateColumn="insertdate" />
 		<table name="oproepfavorite" ownerColumn="user" insertDateColumn="insertdate" />
 		<table name="oproepreaction" ownerColumn="user" insertDateColumn="insertdate"/>
 
Index: php-classes/entities/oproep/CultureelOproep.class.php
===================================================================
--- php-classes/entities/oproep/CultureelOproep.class.php	(revision 605)
+++ php-classes/entities/oproep/CultureelOproep.class.php	(working copy)
@@ -11,9 +11,14 @@
     
     public function validate() {
     	parent::validate();
-		Utils::validateNotEmpty("Vul een culturele instelling in", $this->get("spotid"));
+		//Utils::validateNotEmpty("Vul een culturele instelling in", $this->get("spotid"));
     }
     
+	public function spotIsMandatory() {
+		return false;		
+	}
+    
+    
     /**
      * Implementatie van IOproep
      */
Index: php-classes/entities/oproep/EetOproep.class.php
===================================================================
--- php-classes/entities/oproep/EetOproep.class.php	(revision 605)
+++ php-classes/entities/oproep/EetOproep.class.php	(working copy)
@@ -5,9 +5,13 @@
     
 	public function validate() {
     	parent::validate();
-		Utils::validateNotEmpty("Vul een eetgelegenheid in", $this->get("spotid"), "spotname");
+	//	Utils::validateNotEmpty("Vul een eetgelegenheid in", $this->get("spotid"), "spotname");
     }
     
+    public function spotIsMandatory() {
+    	return false;
+    }
+    
     /**
      * Implementatie van IOproep
      */
Index: php-classes/entities/oproep/EvenementOproep.class.php
===================================================================
--- php-classes/entities/oproep/EvenementOproep.class.php	(revision 605)
+++ php-classes/entities/oproep/EvenementOproep.class.php	(working copy)
@@ -5,9 +5,13 @@
 	
 	public function validate() {
     	parent::validate();
-		Utils::validateNotEmpty("Vul een evenement in", $this->get("spotid"), "spotname");
+		//Utils::validateNotEmpty("Vul een evenement in", $this->get("spotid"), "spotname");
     }
     
+    public function spotIsMandatory() {
+    	return false;
+    }
+    
     /**
      * Implementatie van IOproep
      */
Index: php-classes/entities/oproep/OproepEntity.class.php
===================================================================
--- php-classes/entities/oproep/OproepEntity.class.php	(revision 641)
+++ php-classes/entities/oproep/OproepEntity.class.php	(working copy)
@@ -78,7 +78,7 @@
     	$fulltext = array_merge($fulltext, $extraKeywords);
     	
     	if ($this->spotIsMandatory()) {
-    	$spot = $this->getSpot();
+	    	$spot = $this->getSpot();
 	    	$fulltext []= $spot->getName();
 	    	
 	    	// Haal de cityid van de spot, zodat je niet stiekem een andere cityid mee kan posten
@@ -132,7 +132,7 @@
 	}
 	
 	public static $CAT_BUITEN = 1;
-	public static $CAT_CULTUREEL = 2;
+	public static $CAT_CULTUREEL = 2;	
 	public static $CAT_DISCO = 3;
 	public static $CAT_EET = 4;
 	public static $CAT_EVENEMENT = 5;
Index: php-classes/entities/oproep/WinkelOproep.class.php
===================================================================
--- php-classes/entities/oproep/WinkelOproep.class.php	(revision 605)
+++ php-classes/entities/oproep/WinkelOproep.class.php	(working copy)
@@ -5,9 +5,13 @@
 
 	public function validate() {
     	parent::validate();
-		Utils::validateNotEmpty("Vul een waarde in voor Winkel", $this->get("spotid"), "spotname");
+	//	Utils::validateNotEmpty("Vul een waarde in voor Winkel", $this->get("spotid"), "spotname");
     }
     
+	public function spotIsMandatory() {
+		return false;		
+	}
+    
     /**
      * Implementatie van IOproep
      */
Index: web/pages/import/CityImport.php
===================================================================
--- web/pages/import/CityImport.php	(revision 0)
+++ web/pages/import/CityImport.php	(revision 0)
@@ -0,0 +1,101 @@
+<?php
+include_once PHP_CLASS.'entities/user/UserFactory.class.php';
+include_once PHP_CLASS.'entities/location/Province.class.php';
+include_once PHP_CLASS.'entities/location/City.class.php';
+
+class CityImport {
+	
+	private static $COMMENT_CHAR = "#";
+	
+	private static $NEDERLAND_SYSTEMID = "1";
+	
+	private function clean() {
+		$pq = new PreparedQuery("reflirt_nieuw");
+		$pq->setQuery("DELETE FROM city");
+		$pq->execute();
+		$pq->setQuery("DELETE FROM province");
+		$pq->execute();
+		$pq->setQuery("DELETE FROM country");
+		$pq->execute();
+	}
+
+	public function import() {
+		$this->clean();
+		$user = UserFactory::getSystemUser();
+		
+		$PLAATS		= 0;
+		$GEMEENTE	= 1;
+		$PROVINCIE	= 2;
+		
+		$row = 1;
+		$handle = fopen(BASEDIR."resources/plaatsnamen.csv", "r");
+		while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
+			$firstWord = trim($data[0]);
+			$isComment = $this->isComment($data);
+		    if($isComment || empty($firstWord)) {
+		    	continue;
+		    }
+		    $plaatsnaam	= addslashes($data[$PLAATS]);
+		    $gemeente	= addslashes($data[$GEMEENTE]); 
+		    $provincie	= addslashes($data[$PROVINCIE]);
+		    
+		    $this->insertPlaats($user, $plaatsnaam, $gemeente, $provincie); 
+		    $row++;
+		}
+		fclose($handle);
+		
+	}
+	
+	function insertPlaats(User $user, $plaatsnaam, $gemeente, $provincie) {
+		$prov = $this->ensureProvince($user, $provincie, self::$NEDERLAND_SYSTEMID);
+		
+		$city = new City();
+		$city->setUser($user);
+		$city->put("cicityname", $plaatsnaam);
+		$city->put("ciprovinceid", $prov->getKey());
+		$city->put("cicountryid", self::$NEDERLAND_SYSTEMID);
+		try {
+			$city->save();
+		} catch(DuplicateException $e) {
+			echo  $plaatsnaam . " bestaat al<br/>";
+		}
+	}
+	
+	function ensureProvince(User $user, $provincie, $countryid) {
+//		$provDB = new Province();
+//		$provDB->setUser($user);
+//		$provDB->put("province", $provincie);
+//		$provDB->load();
+
+		$oq = ObjectQuery::buildACS(new Province, $user);
+		$oq->addConstraint(Constraint::eq("province", $provincie));
+		$oq->addConstraint(Constraint::eq("countryid", $countryid));
+		$prov = SearchObject::select($oq);
+		
+		if($prov == null) {
+			$prov = new Province();
+			$prov->put("province", $provincie);
+			$prov->put("countryid", $countryid);
+			$prov->save();	
+		}
+		return $prov;	
+	}
+	
+	/** @WebAction */
+	public function overview() {
+	}
+	
+	private function isComment($data) {
+		if(count($data) > 0) {
+			$row = trim($data[0]);
+			$firstChar = substr($row, 0, 1);
+			if ($firstChar == self::$COMMENT_CHAR) {
+				return true;
+			}
+		}
+		return false; 
+	}
+	
+}
+
+?>
\ No newline at end of file
Index: web/pages/import/UserImport.php
===================================================================
--- web/pages/import/UserImport.php	(revision 0)
+++ web/pages/import/UserImport.php	(revision 0)
@@ -0,0 +1,107 @@
+<?php
+include_once PHP_CLASS . 'entities/location/CityFactory.class.php';
+class UserImport {
+	
+	private $systemUser;
+	
+	private function deleteAll() {
+		$pq = new PreparedQuery("reflirt_nieuw");
+		$pq->setDelete("photoalbum");
+		$pq->execute();
+		$pq->setDelete("photo");
+		$pq->execute();
+		$pq->setDelete("reflirt_nieuw.users");
+		$pq->execute();
+	}
+
+	public function import() {
+		$this->deleteAll();
+		
+		$this->systemUser = UserFactory::getSystemUser();
+		 
+		$oq = ObjectQuery::buildACS(new OldUser, $this->systemUser);
+		//$oq->addConstraint(Constraint::eq("import", ""));
+		//$oq->setLimit(300);
+		$list = SearchObject::search($oq);
+		$onbekendeCities = 0;
+		$dateFormat = new DateFormat();
+		foreach($list as $oldUser) {
+			$user = new User();
+			$user->putCol("username", $oldUser->get("NICK"));
+			$user->putCol("email", $oldUser->get("EMAIL"));
+			$user->putCol("firstname", $oldUser->get("VOORNAAM"));
+			$tussenvoegsel = $oldUser->get("TUSSENVOEGSEL");
+			$achternaam = $oldUser->get("ACHTERNAAM");
+			if(!empty($tussenvoegsel)) {
+				$achternaam = $tussenvoegsel . " " . $achternaam;
+			}
+			$user->putCol("password", $oldUser->get("PASS"));
+			
+			$dateFormat->setValue($oldUser->get("GEB_DAT"));
+			$user->putCol("birthdate", $dateFormat->parse());
+			$dateFormat->setValue($oldUser->get("REG_DAT"));
+			$user->putCol("insertdate", $dateFormat->parse());
+			$user->putCol("lastaction", DateUtils::now());
+			
+			$plaatsnaam = $oldUser->get("PLAATSNAAM");
+			$city = CityFactory::getCity($plaatsnaam);
+			if($city == null) {
+				$onbekendeCities++;
+				//echo "Onbekende stad: " . $plaatsnaam . "<br/>";
+			} else {
+				$user->putCol("cityid", $city->getKey());
+			}
+			
+			$sex = $oldUser->get("GESLACHT");
+			if($sex == "1") {
+				$user->putCol("sex", "1");
+			} else {
+				$user->putCol("sex", "0");
+			}
+			$user->save();
+			
+			// Photo
+			$toon_photo_id = $oldUser->get("TOON_FOTO_ID");
+			if($toon_photo_id == "1") {
+				$photo = $this->makePhoto($user, $oldUser);
+				if($photo != null) {
+					$user->putCol("photoid", $photo->getKey());
+					$user->save();
+				}
+			}
+		}
+		echo "Onbekende steden: " . $onbekendeCities. "<br/>";
+	}
+	
+	private function makePhoto($newUser, $oldUser) {
+		$nick = $oldUser->get("NICK");
+		
+		$oq = ObjectQuery::buildACS(new OldPhoto, $this->systemUser);
+		$oq->addConstraint(Constraint::eq("NICK", $nick));
+		$oldPhoto = SearchObject::select($oq);
+		
+		if($oldPhoto == null) {
+			return null;
+		}
+		$filename = $oldPhoto->get("ORG_FILENAME");
+		
+		$album = new PhotoAlbum();
+		$album->setUser($newUser);
+		$album->putCol("albumname", "Mijn album");
+		$album->save();
+		
+		$photo = new PhotoTemp();
+		$photo->setUser($newUser);
+		$photo->putCol("albumid", $album->getKey());
+		$photo->putCol("filename", $filename);
+		$photo->putCol("orig_filename", $filename);
+		$photo->putCol("mimetype", "image/jpeg");
+		$photo->save();
+		
+		echo "foto voor user $nick : " . $filename . "<br/>";
+		return $photo;
+	}
+	
+}
+
+?>
\ No newline at end of file
Index: web/pages/import/ZoekopdrachtImport.php
===================================================================
--- web/pages/import/ZoekopdrachtImport.php	(revision 0)
+++ web/pages/import/ZoekopdrachtImport.php	(revision 0)
@@ -0,0 +1,549 @@
+<?php
+include_once PHP_CLASS.'entities/oproep/OproepEntity.class.php';
+include_once PHP_CLASS.'entities/oproep/OproepFactory.class.php';
+include_once PHP_CLASS . 'entities/location/CityFactory.class.php';
+include_once PHP_CLASS . 'entities/location/CountryFactory.class.php';
+
+class ZoekopdrachtImport {
+	
+	private $systemUser;
+	
+	public static $SHORTNAMES = array( // Voor templates, bijv: search.disco.tpl 
+		1	 	=> "buiten",	
+		2 		=> "cultureel",
+		3 		=> "disco",
+		4		=> "eet",
+		5 		=> "evenement",
+		6		=> "ov_bus",
+		7		=> "ov_metro",
+		8		=> "ov_tram",
+		9		=> "ov_trein",
+		10		=> "park",
+		11		=> "recreatie",
+		12		=> "school",
+		13		=> "werk",
+		14		=> "winkel",
+		15		=> "wonen",
+		16		=> "hotel"
+	);
+	
+	public static $CAT_BUITEN = 1;
+	public static $CAT_CULTUREEL = 2;
+	public static $CAT_DISCO = 3;
+	public static $CAT_EET = 4;
+	public static $CAT_EVENEMENT = 5;
+	public static $CAT_OV_BUS = 6;
+	public static $CAT_OV_METRO = 7;
+	public static $CAT_OV_TRAM = 8;
+	public static $CAT_OV_TREIN = 9;
+	public static $CAT_PARK = 10;
+	public static $CAT_RECREATIE = 11;
+	public static $CAT_SCHOOL = 12;
+	public static $CAT_WERK = 13;
+	public static $CAT_WINKEL = 14;
+	public static $CAT_WONEN = 15;
+	public static $CAT_HOTEL = 16;
+	
+	private function startUp() {
+		echo "Starting zoekopdrachten import...<br/>";
+		$this->systemUser = UserFactory::getSystemUser();
+		
+		$pq = new PreparedQuery("reflirt_nieuw");
+		$pq->setDelete("spot");
+		$pq->execute();
+		
+		$pq->setDelete("oproep");
+		$pq->execute();
+	}
+	
+	public function import() {
+		$this->startUp();
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * from ZOEKOPDRACHTEN");
+		$rs = $pq->execute();
+		
+		foreach($rs as $oldOproep) {
+			$cat = $this->getCategory($oldOproep["CATEGORIE"]);
+	    	switch($cat){
+	    		case self::$CAT_BUITEN: 
+	    			$this->importBuitenOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_CULTUREEL: 
+	    			$this->importCultureelOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_DISCO: 
+	    			$this->importDiscoOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_EET: 
+	    			$this->importEetOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_EVENEMENT: 
+	    			$this->importEvenementOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_OV_BUS: 
+	    			//$this->importOvBusOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_OV_METRO: 
+	    			$this->importOvMetroOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_OV_TRAM: 
+	    			//$this->importOvTramOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_OV_TREIN: 
+	    			$this->importOvTreinOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_PARK: 
+	    			$this->importParkOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_RECREATIE: 
+	    			//$this->importRecreatieOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_SCHOOL: 
+	    			$this->importSchoolOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_WERK: 
+	    			$this->importWerkOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_WINKEL: 
+	    			$this->importWinkelOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_WONEN: 
+	    			$this->importWonenOproep($oldOproep);
+	    			break;
+	    		case self::$CAT_HOTEL: 
+	    			$this->importHotelOproep($oldOproep);
+	    			break;
+	    		default:
+	    			DebugUtils::debug("Onbekende cateogrie: ".$cat);
+	    	}
+		}
+		
+	}
+	
+	private function getCategory($oldCat) {
+		$catId = array_search($oldCat, self::$SHORTNAMES);
+		if(!$catId) {
+			throw new Exception("Kan category niet vinden: " . $oldCat); 
+		}
+		return $catId;
+	}
+	
+	private function initOproep($cat, $rs) {
+		$oproep = OproepFactory::getOproep($cat);
+		
+		$user = UserFactory::getUserByLogin($rs["NICK"]);
+		$oproep->setUser($user);
+		
+		$insertDate = DateUtils::stringToDate($rs["DATUM"]);
+		$oproep->putCol("insertdate", $insertDate);
+		$lastUpdate = DateUtils::stringToDate($rs["LAATST_GEWIJZIGD"]);
+		$oproep->putCol("lastupdate", $lastUpdate);
+		
+		$startDate = DateUtils::stringToDate($rs["ZOEKDATUM"]);
+		if(!DateUtils::isEmptyDate($startDate)) {
+			$oproep->putCol("startdate", $startDate);	
+		} else {
+			$oproep->put("regelmatig", 1);
+		}
+		
+		// Komt niet (eens) voor :)
+//		$endDate = DateUtils::stringToDate($rs["EINDDATUM"]);
+//		if(!DateUtils::isEmptyDate($endDate)) {
+//			$oproep->putCol("enddate", $endDate);	
+//		}
+		
+		// Bij nieuw geld 1 = man, 0 = vrouw
+		$sex = $rs["GEZ_GESLACHT"] == "1" ? "0" : "1";
+		$oproep->putCol("sex", $sex);
+		
+		
+		$message = $rs["EIGEN_COMMENTAAR"];
+		$oproep->putCol("message", $message);
+		
+		$oproep->putCol("category", $cat);
+		
+		$title = "Waar ben je?";
+		$oproep->putCol("title", $title);
+		
+		$oproep->putCol("message", $message);
+		
+		return $oproep;
+
+	}
+	
+	private function assertSpot($cat, $name, $city) {
+		Utils::assertNotNull("city mag hier geen NULL zijn", $city);
+		$oq = ObjectQuery::buildACS(new Spot, $this->systemUser);
+		$oq->addConstraint(Constraint::eq("category", $cat));
+		$oq->addConstraint(Constraint::eq("cityid", $city->getKey()));
+		$oq->addConstraint(Constraint::eq("name", $name));
+		
+		$spot = SearchObject::select($oq);
+		if($spot == NULL) {
+			$spot = new Spot();
+			$spot->setUser($this->systemUser);
+			$spot->putCol("category", $cat);
+			$spot->putCol("name", $name);
+			$spot->putCol("cityid", $city->getKey());
+			$spot->save();
+		}
+		return $spot;		
+	}
+	
+	private function assureCity($countryname, $cityname) {
+		$country = CountryFactory::getCountry($countryname);
+		if($country == null) {
+			$country = new Country();
+			$country->setUser($this->systemUser);
+			$country->putCol("cocountryname", $countryname);
+			$country->save();
+		}
+		
+		$oq = ObjectQuery::buildACS(new City, UserFactory::getSystemUser());
+		$oq->addConstraint(Constraint::eq("cicityname", $cityname));
+		$oq->addConstraint(Constraint::eq("cicountryid", $country->getKey()));
+		$city = SearchObject::select($oq);
+		
+		if($city == null) {
+			$city = new City();
+			$city->setUser($this->systemUser);
+			$city->putCol("cicityname", $cityname);
+			$city->putCol("cicountryid", $country->getKey());
+			$city->save();
+		}
+		
+		return $city;
+		
+	}
+	
+	
+	/**
+	 * *************************************************************************
+	 * 	Disco
+	 * *************************************************************************
+	 */
+	public function ImportDiscoOproep($rs) {
+		$id = $rs["ZOEK_ID"];
+		echo "importing disco...$id<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_DISCO, $rs);
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_DISCO WHERE ZOEK_ID = " . $id);
+		$discoRs = $pq->execute();
+		
+		if(count($discoRs) < 1) {
+			return;
+		}
+		
+		$countryName	= $discoRs[0]["LAND"];
+		$cityName 		= $discoRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+		$disoName = $discoRs[0]["DISCO_NAAM"];
+		
+		$disco = $this->assertSpot(OproepEntity::$CAT_DISCO,$disoName, $city);
+		
+		$oproep->putCol("spotid", $disco->getKey());
+		$oproep->save();
+	}
+	
+	/**
+	 * *************************************************************************
+	 * 	Wonen
+	 * *************************************************************************
+	 */
+	public function importWonenOproep($rs) {
+		echo "importing wonen...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_WONEN, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_WONEN WHERE ZOEK_ID = " . $id);
+		$discoRs = $pq->execute();
+		
+		$countryName	= $discoRs[0]["LAND"];
+		$cityName 		= $discoRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+		$oproep->save();
+	}
+	
+	/**
+	 * *************************************************************************
+	 * 	School
+	 * *************************************************************************
+	 */
+	public function ImportSchoolOproep($rs) {
+		echo "importing disco...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_SCHOOL, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_SCHOOL WHERE ZOEK_ID = " . $id);
+		$schoolRs = $pq->execute();
+		
+		$countryName	= $schoolRs[0]["LAND"];
+		$cityName 		= $schoolRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+		$schoolName = $schoolRs[0]["SCHOOL_NAAM"];
+		
+		$school = $this->assertSpot(OproepEntity::$CAT_SCHOOL, $schoolName, $city);
+		
+		$oproep->putCol("spotid", $school->getKey());
+		$oproep->save();
+	}
+
+	/**
+	 * *************************************************************************
+	 * 	Trein
+	 * *************************************************************************
+	 */
+	public function importOvTreinOproep($rs) {
+		echo "importing trein...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_OV_TREIN, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_OV_TREIN WHERE ZOEK_ID = " . $id);
+		$treinRs = $pq->execute();
+		
+		$countryName	= "Nederland";
+		$cityName 		= $treinRs[0]["EINDPLAATS"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+		$oproep->save();
+	}
+	
+	/**
+	 * *************************************************************************
+	 * 	Buiten
+	 * *************************************************************************
+	 */
+	public function importBuitenOproep($rs) {
+		echo "importing buiten...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_BUITEN, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_BUITEN WHERE ZOEK_ID = " . $id);
+		$buitenRs = $pq->execute();
+		
+		$countryName	= $buitenRs[0]["LAND"];
+		$cityName 		= $buitenRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+		$oproep->save();
+	}
+	
+/**
+	 * *************************************************************************
+	 * 	Evenement
+	 * *************************************************************************
+	 */
+	public function importEvenementOproep($rs) {
+		echo "importing evenement...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_EVENEMENT, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_EVENEMENT WHERE ZOEK_ID = " . $id);
+		$buitenRs = $pq->execute();
+		
+		$countryName	= $buitenRs[0]["LAND"];
+		$cityName 		= $buitenRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+//		$evenement = $this->assertSpot(OproepEntity::$CAT_EVENEMENT, "(Onbekend)", $city);
+//		
+//		$oproep->putCol("spotid", $evenement->getKey());
+		
+		$oproep->save();
+	}	
+	
+	/**
+	 * *************************************************************************
+	 * 	Eetgelegenheid
+	 * *************************************************************************
+	 */
+	public function importEetOproep($rs) {
+		echo "importing eetgelegenheid...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_EET, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_EET WHERE ZOEK_ID = " . $id);
+		$buitenRs = $pq->execute();
+		
+		$countryName	= $buitenRs[0]["LAND"];
+		$cityName 		= $buitenRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+		//$evenement = $this->assertSpot(OproepEntity::$CAT_EET, "(Onbekend)", $city);
+		
+		//$oproep->putCol("spotid", $evenement->getKey());
+		
+		$oproep->save();
+	}
+	
+	/**
+	 * *************************************************************************
+	 * 	Park
+	 * *************************************************************************
+	 */
+	public function importParkOproep($rs) {
+		echo "importing park...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_PARK, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_PARK WHERE ZOEK_ID = " . $id);
+		$buitenRs = $pq->execute();
+		
+		$countryName	= $buitenRs[0]["LAND"];
+		$cityName 		= $buitenRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+		$parkName = $buitenRs[0]["PARK_NAAM"];
+		
+		$evenement = $this->assertSpot(OproepEntity::$CAT_PARK, $parkName, $city);
+		
+		$oproep->putCol("spotid", $evenement->getKey());
+		
+		$oproep->save();
+	}
+
+	/**
+	 * *************************************************************************
+	 * 	Werk
+	 * *************************************************************************
+	 */
+	public function importWerkOproep($rs) {
+		echo "importing werk...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_WERK, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_WERK WHERE ZOEK_ID = " . $id);
+		$buitenRs = $pq->execute();
+		
+		$countryName	= $buitenRs[0]["LAND"];
+		$cityName 		= $buitenRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+		$parkName = $buitenRs[0]["WERK_NAAM"];
+		
+		$evenement = $this->assertSpot(OproepEntity::$CAT_WERK, $parkName, $city);
+		
+		$oproep->putCol("spotid", $evenement->getKey());
+		
+		$oproep->save();
+	}
+	
+
+	/**
+	 * *************************************************************************
+	 * 	Cultureel
+	 * *************************************************************************
+	 */
+	public function importCultureelOproep($rs) {
+		echo "importing cutureel...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_CULTUREEL, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_CULTUREEL WHERE ZOEK_ID = " . $id);
+		$buitenRs = $pq->execute();
+		
+		$countryName	= $buitenRs[0]["LAND"];
+		$cityName 		= $buitenRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+//		$parkName = $buitenRs[0]["CULTUREEL_SOORT"];
+//		
+//		$evenement = $this->assertSpot(OproepEntity::$CAT_CULTUREEL, $parkName, $city);
+//		
+//		$oproep->putCol("spotid", $evenement->getKey());
+		
+		$oproep->save();
+	}
+
+	/**
+	 * *************************************************************************
+	 * 	Metro
+	 * *************************************************************************
+	 */
+	public function importOvMetroOproep($rs) {
+		echo "importing metro...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_OV_METRO, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_OV_METRO WHERE ZOEK_ID = " . $id);
+		$buitenRs = $pq->execute();
+		
+		$countryName	= $buitenRs[0]["LAND"];
+		$cityName 		= $buitenRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+		$oproep->save();
+	}
+
+	/**
+	 * *************************************************************************
+	 * 	Winkel
+	 * *************************************************************************
+	 */
+	public function importWinkelOproep($rs) {
+		echo "importing winkel...<br/>";
+		$oproep = $this->initOproep(OproepEntity::$CAT_WINKEL, $rs);
+		$id = $rs["ZOEK_ID"];
+		
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM CAT_WINKEL WHERE ZOEK_ID = " . $id);
+		$buitenRs = $pq->execute();
+		
+		$countryName	= $buitenRs[0]["LAND"];
+		$cityName 		= $buitenRs[0]["PLAATSNAAM"];
+		
+		$city = $this->assureCity($countryName, $cityName);
+		$oproep->putCol("cityid", $city->getKey());
+		
+//		$parkName = $buitenRs[0]["WINKEL_SOORT"];
+//		
+//		$evenement = $this->assertSpot(OproepEntity::$CAT_WINKEL, $parkName, $city);
+//		
+//		$oproep->putCol("spotid", $evenement->getKey());
+		
+		$oproep->save();
+	}
+	
+	
+}
+
+
+
+?>
\ No newline at end of file
Index: web/pages/import/import.php
===================================================================
--- web/pages/import/import.php	(revision 648)
+++ web/pages/import/import.php	(working copy)
@@ -12,109 +12,57 @@
 
 class ImportPage extends Page {
 	
-	private $systemUser;
+	/**
+	 * @WebAction
+	 * @Ajax
+	 *
+	 */
+	public function test() {
+		$pq = new PreparedQuery("reflirt_oud");
+		$pq->setQuery("SELECT * FROM USER limit 1");
+		DebugUtils::debug($pq->execute());
+		
+		$pq2 = new PreparedQuery("reflirt_nieuw");
+		$pq2->setQuery("SELECT * FROM USERS limit 1");
+		DebugUtils::debug($pq2->execute());
+		
+	}
 	
-	private function deleteAll() {
-		$pq = new PreparedQuery();
-		$pq->setQuery("DELETE FROM photoalbum");
-		$pq->execute();
-		$pq->setQuery("DELETE FROM photo");
-		$pq->execute();
-		$pq->setQuery("DELETE FROM users");
-		$pq->execute();
+	/**
+	 * @WebAction
+	 * @Ajax
+	 */
+	public function importCities() {
+		include_once 'CityImport.php';
+		$importer = new CityImport();
+		$importer->import();	
 	}
+	
 	/**
 	 * @WebAction
 	 * @Ajax
 	 */
-	public function overview() {
-		$this->deleteAll();
-		
-		$this->systemUser = UserFactory::getSystemUser(); 
-		$oq = ObjectQuery::buildACS(new OldUser, $this->systemUser);
-		//$oq->addConstraint(Constraint::eq("import", ""));
-		//$oq->setLimit(300);
-		$list = SearchObject::search($oq);
-		$onbekendeCities = 0;
-		$dateFormat = new DateFormat();
-		foreach($list as $oldUser) {
-			$user = new User();
-			$user->putCol("username", $oldUser->get("NICK"));
-			$user->putCol("email", $oldUser->get("EMAIL"));
-			$user->putCol("firstname", $oldUser->get("VOORNAAM"));
-			$tussenvoegsel = $oldUser->get("TUSSENVOEGSEL");
-			$achternaam = $oldUser->get("ACHTERNAAM");
-			if(!empty($tussenvoegsel)) {
-				$achternaam = $tussenvoegsel . " " . $achternaam;
-			}
-			$user->putCol("password", $oldUser->get("PASS"));
-			
-			$dateFormat->setValue($oldUser->get("GEB_DAT"));
-			$user->putCol("birthdate", $dateFormat->parse());
-			$dateFormat->setValue($oldUser->get("REG_DAT"));
-			$user->putCol("insertdate", $dateFormat->parse());
-			$user->putCol("lastaction", DateUtils::now());
-			
-			$plaatsnaam = $oldUser->get("PLAATSNAAM");
-			$city = $this->getCity($plaatsnaam);
-			if($city == null) {
-				$onbekendeCities++;
-				//echo "Onbekende stad: " . $plaatsnaam . "<br/>";
-			} else {
-				$user->putCol("cityid", $city->getKey());
-			}
-			
-			$oldUser->putCol("import", 1);
-			//DebugUtils::debug($oldUser);
-			//$oldUser->save();
-			$user->save();
-			
-			// Photo
-			$toon_photo_id = $oldUser->get("TOON_FOTO_ID");
-			if($toon_photo_id == "1") {
-				$photo = $this->makePhoto($user, $oldUser);
-				if($photo != null) {
-					$user->putCol("photoid", $photo->getKey());
-					$user->save();
-				}
-			}
-		}
-		echo "Onbekende steden: " . $onbekendeCities. "<br/>";
+	public function importUsers() {
+		include_once 'UserImport.php';
+		$importer = new UserImport();
+		$importer->import();	
 	}
 	
-	private function makePhoto($newUser, $oldUser) {
-		$nick = $oldUser->get("NICK");
-		
-		$oq = ObjectQuery::buildACS(new OldPhoto, $this->systemUser);
-		$oq->addConstraint(Constraint::eq("NICK", $nick));
-		$oldPhoto = SearchObject::select($oq);
-		
-		if($oldPhoto == null) {
-			return null;
-		}
-		$filename = $oldPhoto->get("ORG_FILENAME");
-		
-		$album = new PhotoAlbum();
-		$album->setUser($newUser);
-		$album->putCol("albumname", "Mijn album");
-		$album->save();
-		
-		$photo = new PhotoTemp();
-		$photo->setUser($newUser);
-		$photo->putCol("albumid", $album->getKey());
-		$photo->putCol("filename", $filename);
-		$photo->putCol("orig_filename", $filename);
-		$photo->putCol("mimetype", "image/jpeg");
-		$photo->save();
-		
-		echo "foto voor user $nick : " . $filename . "<br/>";
-		return $photo;
+	/**
+	 * @WebAction
+	 * @Ajax
+	 */
+	public function importZoekopdrachten() {
+		include_once 'ZoekopdrachtImport.php';
+		$importer = new ZoekopdrachtImport();
+		$importer->import();	
 	}
 	
-	private function getCity($city) {
-		$oq = ObjectQuery::buildACS(new City, $this->systemUser);
-		$oq->addConstraint(Constraint::eq("cicityname", $city));
-		return SearchObject::select($oq);
+	/**
+	 * @Webaction
+	 */
+	public function overview() {
+		
 	}
 
 }
@@ -139,5 +87,6 @@
 		parent::__construct("fotos_oud");
 	}
 }
-
+
+
 ?>
